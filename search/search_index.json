{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"REST Framework YAML YAML support for Django REST Framework Overview YAML support extracted as a third party package directly from the official Django REST Framework implementation. It's built using the PyYAML package. Requirements Python (2.7, 3.3, 3.4) Django (1.6, 1.7) Installation Install using pip ... $ pip install djangorestframework-yaml Example REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), } You can also set the renderer and parser used for an individual view, or viewset, using the APIView class based views. from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.parsers import YAMLParser from rest_framework_yaml.renderers import YAMLRenderer class ExampleView(APIView): \"\"\" A view that can accept POST requests with YAML content. \"\"\" parser_classes = (YAMLParser,) renderer_classes = (YAMLRenderer,) def post(self, request, format=None): return Response({'received data': request.DATA}) Sample output --- - email: jpadilla@example.com is_staff: true url: \"http://127.0.0.1:8000/users/1/\" username: jpadilla Testing Install testing requirements. $ pip install -r requirements.txt Run with runtests. $ ./runtests.py You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: $ tox Documentation To build the documentation, you'll need to install mkdocs . $ pip install mkdocs To preview the documentation: $ mkdocs serve Running at: http://127.0.0.1:8000/ To build the documentation: $ mkdocs build","title":"Home"},{"location":"#rest-framework-yaml","text":"YAML support for Django REST Framework","title":"REST Framework YAML"},{"location":"#overview","text":"YAML support extracted as a third party package directly from the official Django REST Framework implementation. It's built using the PyYAML package.","title":"Overview"},{"location":"#requirements","text":"Python (2.7, 3.3, 3.4) Django (1.6, 1.7)","title":"Requirements"},{"location":"#installation","text":"Install using pip ... $ pip install djangorestframework-yaml","title":"Installation"},{"location":"#example","text":"REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ), 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ), } You can also set the renderer and parser used for an individual view, or viewset, using the APIView class based views. from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.parsers import YAMLParser from rest_framework_yaml.renderers import YAMLRenderer class ExampleView(APIView): \"\"\" A view that can accept POST requests with YAML content. \"\"\" parser_classes = (YAMLParser,) renderer_classes = (YAMLRenderer,) def post(self, request, format=None): return Response({'received data': request.DATA})","title":"Example"},{"location":"#sample-output","text":"--- - email: jpadilla@example.com is_staff: true url: \"http://127.0.0.1:8000/users/1/\" username: jpadilla","title":"Sample output"},{"location":"#testing","text":"Install testing requirements. $ pip install -r requirements.txt Run with runtests. $ ./runtests.py You can also use the excellent tox testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run: $ tox","title":"Testing"},{"location":"#documentation","text":"To build the documentation, you'll need to install mkdocs . $ pip install mkdocs To preview the documentation: $ mkdocs serve Running at: http://127.0.0.1:8000/ To build the documentation: $ mkdocs build","title":"Documentation"},{"location":"parsers/","text":"Parsers Setting the parsers The default set of parsers may be set globally, using the DEFAULT_PARSER_CLASSES setting. For example, the following settings would allow requests with YAML content. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ) } You can also set the parsers used for an individual view, or viewset, using the APIView class based views. from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.parsers import YAMLParser class ExampleView(APIView): \"\"\" A view that can accept POST requests with YAML content. \"\"\" parser_classes = (YAMLParser,) def post(self, request, format=None): return Response({'received data': request.DATA}) Or, if you're using the @api_view decorator with function based views. @api_view(['POST']) @parser_classes((YAMLParser,)) def example_view(request, format=None): \"\"\" A view that can accept POST requests with YAML content. \"\"\" return Response({'received data': request.DATA}) API Reference YAMLParser Parses YAML request content. Requires the pyyaml package to be installed. .media_type : application/yaml","title":"Parsers"},{"location":"parsers/#parsers","text":"","title":"Parsers"},{"location":"parsers/#setting-the-parsers","text":"The default set of parsers may be set globally, using the DEFAULT_PARSER_CLASSES setting. For example, the following settings would allow requests with YAML content. REST_FRAMEWORK = { 'DEFAULT_PARSER_CLASSES': ( 'rest_framework_yaml.parsers.YAMLParser', ) } You can also set the parsers used for an individual view, or viewset, using the APIView class based views. from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.parsers import YAMLParser class ExampleView(APIView): \"\"\" A view that can accept POST requests with YAML content. \"\"\" parser_classes = (YAMLParser,) def post(self, request, format=None): return Response({'received data': request.DATA}) Or, if you're using the @api_view decorator with function based views. @api_view(['POST']) @parser_classes((YAMLParser,)) def example_view(request, format=None): \"\"\" A view that can accept POST requests with YAML content. \"\"\" return Response({'received data': request.DATA})","title":"Setting the parsers"},{"location":"parsers/#api-reference","text":"","title":"API Reference"},{"location":"parsers/#yamlparser","text":"Parses YAML request content. Requires the pyyaml package to be installed. .media_type : application/yaml","title":"YAMLParser"},{"location":"renderers/","text":"Renderers Setting the renderers The default set of renderers may be set globally, using the DEFAULT_RENDERER_CLASSES setting. For example, the following settings would use YAML as the main media type and also include the self describing API. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ) } You can also set the renderers used for an individual view, or viewset, using the APIView class based views. from django.contrib.auth.models import User from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.renderers import YAMLRenderer class UserCountView(APIView): \"\"\" A view that returns the count of active users in YAML. \"\"\" renderer_classes = (YAMLRenderer,) def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @renderer_classes((YAMLRenderer,)) def user_count_view(request, format=None): \"\"\" A view that returns the count of active users in YAML. \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) API Reference YAMLRenderer Renders the request data into YAML . Requires the pyyaml package to be installed. Note that non-ascii characters will be rendered using \\uXXXX character escape. For example: unicode black star: \"\\u2605\" .media_type : application/yaml .format : '.yaml' .charset : utf-8","title":"Renderers"},{"location":"renderers/#renderers","text":"","title":"Renderers"},{"location":"renderers/#setting-the-renderers","text":"The default set of renderers may be set globally, using the DEFAULT_RENDERER_CLASSES setting. For example, the following settings would use YAML as the main media type and also include the self describing API. REST_FRAMEWORK = { 'DEFAULT_RENDERER_CLASSES': ( 'rest_framework_yaml.renderers.YAMLRenderer', ) } You can also set the renderers used for an individual view, or viewset, using the APIView class based views. from django.contrib.auth.models import User from rest_framework.response import Response from rest_framework.views import APIView from rest_framework_yaml.renderers import YAMLRenderer class UserCountView(APIView): \"\"\" A view that returns the count of active users in YAML. \"\"\" renderer_classes = (YAMLRenderer,) def get(self, request, format=None): user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content) Or, if you're using the @api_view decorator with function based views. @api_view(['GET']) @renderer_classes((YAMLRenderer,)) def user_count_view(request, format=None): \"\"\" A view that returns the count of active users in YAML. \"\"\" user_count = User.objects.filter(active=True).count() content = {'user_count': user_count} return Response(content)","title":"Setting the renderers"},{"location":"renderers/#api-reference","text":"","title":"API Reference"},{"location":"renderers/#yamlrenderer","text":"Renders the request data into YAML . Requires the pyyaml package to be installed. Note that non-ascii characters will be rendered using \\uXXXX character escape. For example: unicode black star: \"\\u2605\" .media_type : application/yaml .format : '.yaml' .charset : utf-8","title":"YAMLRenderer"}]}